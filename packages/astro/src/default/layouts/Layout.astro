---
import { ViewTransitions } from 'astro:transitions';
import { readFaviconFile } from '../utils/favicon';
import { readLogoFile } from '../utils/logo';

interface Props {
  title: string;
  description?: string;
}

const { title, description = 'TutorialKit' } = Astro.props;
const baseURL = import.meta.env.BASE_URL;
const logoUrl = joinPaths(baseURL, '/logo.svg');
---

<!doctype html>
<html lang="en" transition:animate="none" class="h-full overflow-hidden">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="og:title" content={title} />
    <meta name="og:description" content={description} />
    <meta name="og:image" content={logoUrl} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={logoUrl} />
    <title>{title}</title>
    {faviconUrl ? <link rel="icon" type="image/svg+xml" href={faviconUrl} /> : null}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet" />
    <ViewTransitions />
    <script is:inline>
      setTutorialKitTheme();

      function setTutorialKitTheme() {
        let theme = localStorage.getItem('tk_theme');

        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        document.querySelector('html')?.setAttribute('data-theme', theme);
      }
    </script>
    <script>
      import { swapFunctions as builtInSwap } from 'astro:transitions/client';

      declare global {
        function setTutorialKitTheme(): void;
      }

      document.addEventListener('astro:before-swap', (event) => {
        event.swap = () => {
          const { newDocument } = event;

          builtInSwap.deselectScripts(newDocument);
          builtInSwap.swapRootAttributes(newDocument);

          setTutorialKitTheme();

          /**
           * Keep the dynamically injected style sheet from Codemirror on all transitions.
           */
          const codemirrorStyles = document.head.querySelector('style[data-astro-transition-persist="codemirror"]');

          builtInSwap.swapHeadElements(newDocument);

          if (codemirrorStyles) {
            document.head.insertAdjacentElement('afterbegin', codemirrorStyles);
          }

          // only swap the main area of the page so we keep the webcontainer iframe intact
          const newMain = newDocument.querySelector('main[data-swap-root]');
          const oldMain = document.querySelector('main[data-swap-root]');

          if (newMain && oldMain) {
            builtInSwap.swapBodyElement(newMain, oldMain);

            // delete extraneous route announcer
            document.querySelector('.astro-route-announcer')?.remove();
          } else {
            // fallback to built-in body swap semantics
            builtInSwap.swapBodyElement(newDocument.body, document.body);
          }
        };
      });
    </script>
  </head>
  <body class="h-full text-black relative overflow-hidden">
    <slot />
  </body>
</html>
